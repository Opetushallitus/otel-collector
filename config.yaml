receivers:
  otlp:
    protocols:
      grpc:
        endpoint: "localhost:4317"
      http:
        endpoint: "localhost:4318"
  prometheus:
    config:
      scrape_configs:
        - job_name: 'java-prometheus'
          scrape_interval: 5s
          static_configs:
            - targets: ['localhost:9100']
          labels:
            hostname: ${env:hostname}
            instance: ${env:hostname}
        - job_name: 'jmx-prometheus'
          scrape_interval: 5s
          static_configs:
            - targets: ['localhost:1134']
          labels:
            hostname: ${env:hostname}
            instance: ${env:hostname}

  awsecscontainermetrics:
    collection_interval: 5s
  filelog/app:
    include:
    - /logs/oph*.log
    - /logs/app*.log
    - /logs/app*.internal
    - /logs/catalina0.log
    - /logs/virkailija.log
    - /logs/hakija.log
    - /logs/cas-cas.log
    - /logs/cas-oppija.log
    - /logs/ehoks.log
    - /logs/henkilotietomuutos*.log
    - /logs/kayttooikeus*.log
    - /logs/*-console.log
    multiline:
      line_start_pattern: ^\d+-\d+-\d+.\d+:\d+:\d+.\d+\+?\d?\d?:?\d?\d?|^\[.*\]
    start_at: beginning
  filelog/audit:
    include:
    - /logs/audit*
    - /logs/auditlog_*
    start_at: beginning
  filelog/access:
    include:
    - /logs/*access*
    - /logs/access*
    start_at: beginning
  filelog/debug:
    include:
    - /logs/*_gc.log*
    start_at: beginning

processors:
  memory_limiter:
    limit_mib: 50
    check_interval: 5s
  resourcedetection:
    detectors:
      - env
      - system
      - ecs
      - ec2
    timeout: 60s
  filter:
    metrics:
      include:
        match_type: strict
        metric_names:
          - ecs.task.memory.utilized
          - ecs.task.memory.reserved
          - ecs.task.cpu.utilized
          - ecs.task.cpu.reserved
          - ecs.task.network.rate.rx
          - ecs.task.network.rate.tx
          - ecs.task.storage.read_bytes
          - ecs.task.storage.write_bytes
          - container.duration

exporters:
  awsxray:
    region: ${env:AWS_REGION}
  prometheusremotewrite:
    endpoint: ${env:AWS_PROMETHEUS_ENDPOINT}
    auth:
      authenticator: sigv4auth
    resource_to_telemetry_conversion:
      enabled: true
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 10s
      max_elapsed_time: 30s
    timeout: 15s
  awscloudwatchlogs/app:
    log_group_name: ${env:ENV_NAME}-app-${env:SERVICE}
    log_stream_name: ${env:HOSTNAME}
    raw_log: true
  awscloudwatchlogs/audit:
    log_group_name: ${env:ENV_NAME}-audit-${env:SERVICE}
    log_stream_name: ${env:HOSTNAME}
    raw_log: true
  awscloudwatchlogs/debug:
    log_group_name: ${env:ENV_NAME}-debug-${env:SERVICE}
    log_stream_name: ${env:HOSTNAME}
    raw_log: true
  awscloudwatchlogs/access:
    log_group_name: ${env:ENV_NAME}-access-${env:SERVICE}
    log_stream_name: ${env:HOSTNAME}
    raw_log: true


extensions:
  health_check:
  awsproxy:
  sigv4auth:
    service: aps
    region: ${env:AWS_REGION}

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [resourcedetection, memory_limiter]
      exporters: [awsxray]
    metrics:
      receivers: [prometheus]
      processors: [resourcedetection, memory_limiter]
      exporters: [prometheusremotewrite]
    metrics/ecs:
      receivers: [awsecscontainermetrics]
      processors: [filter]
      exporters: [prometheusremotewrite]
    logs/app:
      receivers: [filelog/app]
      exporters: [awscloudwatchlogs/app]
    logs/audit:
      receivers: [filelog/audit]
      exporters: [awscloudwatchlogs/audit]
    logs/access:
      receivers: [filelog/access]
      exporters: [awscloudwatchlogs/access]
    logs/debug:
      receivers: [filelog/debug]
      exporters: [awscloudwatchlogs/debug]

  extensions: [health_check, awsproxy, sigv4auth]